# -*- coding: UTF-8 -*-

"""
see : https://allennlp.org/
"""

from datetime import datetime

from gs_framework.gs_resource import set_http_proxy
import logging

logger = logging.getLogger(__name__)


class AllenNLPPredictor:
    _ner_predictor = None
    _sentiment_predictor = None

    @classmethod
    def _change_env(cls):
        set_http_proxy()

        # 在 import 之前，先将 环境变量替换掉，以保存在特定的 folder 里
        import os
        os.environ["ALLENNLP_CACHE_ROOT"] = "/gdrive/My Drive/GS/cache/allennlp"
        os.environ["XDG_CACHE_HOME"] = "/gdrive/My Drive/GS/cache"
        os.environ["TMP"] = "/gdrive/My Drive/GS/tmp_debug_73"
        os.environ["TEMP"] = "/gdrive/My Drive/GS/tmp_debug_73"
        # !!! ALERT AllenNLP 做过如下的一些改动
        #   > 修改 transformer 的 file_utils.py ， 使得其读取 system.proxy 参数项，即 修改 requests.xxx 中的 proxy 参数项
        #   > 另外，etag_timeout 设置的值过小，网络环境差的情况下，无法得到有效的内容
        # 相关改动，已保存在 /backup_of_third_part_project/transformer/file_utils.py 下

    @classmethod
    def ner_predictor(cls):
        if cls._ner_predictor is not None:
            return cls._ner_predictor
        cls._change_env()
        from allennlp_models.pretrained import named_entity_recognition_with_elmo_peters_2018
        cls._ner_predictor = named_entity_recognition_with_elmo_peters_2018()
        return cls._ner_predictor

    @classmethod
    def sentiment_predictor(cls):
        if cls._sentiment_predictor is not None:
            return cls._sentiment_predictor
        cls._change_env()
        from allennlp.predictors.predictor import Predictor
        cls._sentiment_predictor = Predictor.from_path("https://storage.googleapis.com/allennlp-public-models/sst-roberta-large-2020.06.08.tar.gz")
        return cls._sentiment_predictor


#
# begin = datetime.now()
# # v = predictor.predict(sentence="a very well-made, funny and entertaining picture.")
# v = predictor.predict(
#     sentence="AllenNLP is a PyTorch-based natural language processing library developed at the Allen Institute for Artificial Intelligence in Seattle.")
# print("-"*20)
# print(v)
# print(f"predict time : {(datetime.now()-begin).total_seconds()}")
# one result of sentiment , time code : 0.526 sec
# {'logits': [5.192182540893555, -3.8541884422302246], 'probs': [0.9998822212219238, 0.00011780389468185604], 'token_ids': [0, 10, 182, 157, 111, 156, 2156, 6269, 8, 11110, 2170, 479, 2], 'label': '1', 'tokens': ['<s>', 'Ġa', 'Ġvery', 'Ġwell', 'Ġ-', 'Ġmade', 'Ġ,', 'Ġfunny', 'Ġand', 'Ġentertaining', 'Ġpicture', 'Ġ.', '</s>']}

# ner output
# {'logits': [[2.0384273529052734, -0.7373636960983276, -4.715230941772461, -5.979605197906494, 8.193045616149902, 4.09965705871582, 0.796494722366333, 0.21593308448791504, -1.0609331130981445, -5.617541313171387, -4.356512069702148, -6.03173303604126, -0.10518860816955566, -1.707840085029602, -5.042416095733643, -9.177091598510742, -8.888744354248047], [14.124290466308594, -4.928201198577881, -3.8395063877105713, -6.244611740112305, -4.7507405281066895, -3.382514476776123, -3.7183220386505127, -0.4494035542011261, -5.862771987915039, -0.4073505997657776, -6.134496212005615, -3.876582622528076, -3.772324562072754, -0.05508914589881897, -0.8906786441802979, -4.148930549621582, -3.3245720863342285], [12.272281646728516, -4.18841552734375, -2.2872865200042725, -6.42719841003418, -4.281904697418213, -2.6517319679260254, 1.0338728427886963, -4.389060020446777, -4.203507423400879, 0.31903645396232605, -2.647756576538086, -6.732860565185547, -1.461150884628296, -2.9757168292999268, -1.1869596242904663, -4.218828201293945, -2.4688782691955566], [-0.2905307412147522, 1.230210304260254, -5.451647758483887, -5.985175609588623, 9.165159225463867, 5.85886812210083, 1.9413483142852783, 0.006258487701416016, -1.9995615482330322, -5.508861541748047, -3.5070552825927734, -5.058560848236084, 0.21160221099853516, -2.0120842456817627, -5.687653541564941, -8.08919620513916, -8.930293083190918], [13.28849983215332, -5.134918212890625, -3.6161980628967285, -7.234969139099121, -2.9931604862213135, -3.2362723350524902, -2.659485340118408, -0.47798246145248413, -6.656599998474121, -0.15129348635673523, -5.645998477935791, -4.015992164611816, -3.341384172439575, -1.0006482601165771, -0.9176112413406372, -3.331088066101074, -3.1891002655029297], [13.431023597717285, -4.583681106567383, -2.7551844120025635, -6.455631256103516, -2.7231359481811523, -3.474374294281006, -1.363086462020874, -1.1033246517181396, -5.58035135269165, -0.46125364303588867, -5.015367031097412, -3.8271594047546387, -2.646361827850342, -1.541821002960205, -1.390537142753601, -3.5458216667175293, -2.677182197570801], [13.776350021362305, -4.396499156951904, -3.3136229515075684, -5.654171943664551, -3.8465309143066406, -4.085412979125977, -2.1211516857147217, -1.0459825992584229, -5.653698444366455, -0.6124453544616699, -4.959707736968994, -2.9443087577819824, -2.814999580383301, -1.6483941078186035, -1.2201921939849854, -3.5596885681152344, -2.029691457748413], [14.420990943908691, -4.638229846954346, -3.6597046852111816, -5.825232028961182, -3.9776434898376465, -3.880664110183716, -2.3375675678253174, -1.2356247901916504, -5.676731109619141, -0.7108430862426758, -5.559979438781738, -3.4729361534118652, -3.00240159034729, -1.769271731376648, -1.7766821384429932, -3.849599838256836, -2.453601360321045], [14.681386947631836, -4.978325843811035, -3.5055363178253174, -5.889069080352783, -3.2781031131744385, -5.235280513763428, -2.4234814643859863, -0.8822344541549683, -6.055890083312988, -0.5050341486930847, -5.932466506958008, -2.9865458011627197, -3.1620213985443115, -2.1754260063171387, -1.3557543754577637, -3.5231144428253174, -2.2928168773651123], [14.685426712036133, -4.985462188720703, -3.556828737258911, -6.114337921142578, -2.8715391159057617, -4.938533306121826, -2.3812317848205566, -0.7710023522377014, -6.2920098304748535, -0.6847966909408569, -6.154913425445557, -3.371929407119751, -3.27875018119812, -2.2788920402526855, -1.6979209184646606, -3.5268800258636475, -2.776515483856201], [14.197334289550781, -5.103456020355225, -3.1940886974334717, -5.598908424377441, -3.65517520904541, -3.955441951751709, -2.4333901405334473, -1.1968908309936523, -5.445152282714844, -0.5419145226478577, -5.725618362426758, -3.680708885192871, -2.97659969329834, -1.933667540550232, -1.5603785514831543, -3.2480356693267822, -2.3167595863342285], [13.903247833251953, -3.2476894855499268, -3.7089040279388428, -5.347135066986084, -3.6808955669403076, -4.674158096313477, -2.65120267868042, -0.8376610279083252, -5.159145832061768, -0.6641802191734314, -5.611780166625977, -2.9220263957977295, -3.3592116832733154, -1.9982746839523315, -1.834301471710205, -3.443089246749878, -2.525219202041626], [13.433448791503906, -4.918398857116699, -2.8972785472869873, -6.665539264678955, -4.477384567260742, -2.464911460876465, 0.26862287521362305, -3.886042833328247, -4.1418046951293945, 0.7599033117294312, -5.073592662811279, -6.483133792877197, -1.885604977607727, -2.1004772186279297, -1.545591950416565, -3.288788080215454, -2.634605884552002], [1.2283486127853394, -1.6671442985534668, 2.7244560718536377, -10.345162391662598, 0.44705677032470703, -2.169832229614258, 16.631397247314453, -8.534163475036621, -2.702219009399414, 4.8705549240112305, 2.894845485687256, -10.736400604248047, 2.7197115421295166, -10.240667343139648, -3.7840473651885986, -5.29185152053833, -4.04187536239624], [2.2786309719085693, -8.9837646484375, -2.657395362854004, -3.6883468627929688, -5.610106468200684, -6.925302505493164, 6.443178176879883, 5.785282611846924, -10.238442420959473, 15.304702758789062, -6.0460710525512695, -3.4938132762908936, -4.251025676727295, -4.3413262367248535, 3.1824371814727783, -0.3307800889015198, 3.5868191719055176], [3.429054021835327, -8.036470413208008, -1.8673652410507202, -4.689340114593506, -7.4957404136657715, -6.257505416870117, 6.0696516036987305, 4.032041072845459, -10.180849075317383, 14.924448013305664, -4.6948041915893555, -5.8458027839660645, -3.2598302364349365, -3.6635007858276367, 3.158679485321045, -1.1309020519256592, 2.851253032684326], [1.3897597789764404, -8.308462142944336, -1.1500662565231323, -4.345901966094971, -5.275298118591309, -6.302944183349609, 7.712461948394775, 5.389895915985107, -10.35986328125, 16.117191314697266, -2.5355541706085205, -4.936524391174316, -3.2815184593200684, -4.078799247741699, 3.298924684524536, -2.0007476806640625, 3.346825122833252], [2.080075263977051, -4.261770725250244, -8.64089298248291, 2.735323429107666, 2.0120091438293457, -3.251866340637207, -6.781647205352783, 17.02744483947754, -7.385159492492676, 5.495009899139404, -11.234991073608398, 2.547621250152588, -9.687795639038086, 2.574384927749634, -1.3956174850463867, -5.5030341148376465, -3.0115299224853516], [14.278857231140137, -4.431173324584961, -3.776709794998169, -6.479849338531494, -5.020627975463867, -4.095029354095459, -4.0113935470581055, -0.4916790723800659, -5.757884979248047, 1.3186115026474, -4.506479740142822, -5.604326248168945, -4.717654228210449, -2.1484909057617188, -2.523773670196533, -5.08660888671875, -2.778204917907715], [-1.4029390811920166, 16.012821197509766, -6.6120405197143555, -3.639380693435669, 5.114687919616699, -2.7002267837524414, -0.3607218265533447, 0.9645020961761475, -2.613682270050049, -4.527804374694824, 1.4689626693725586, 3.4146969318389893, -3.1221680641174316, -4.687416076660156, -6.708435535430908, -6.485835075378418, -6.702795028686523], [13.946046829223633, -3.1759963035583496, -5.2672038078308105, -6.082798004150391, -3.6177279949188232, -3.069744110107422, -4.365424633026123, -0.46324899792671204, -5.737735748291016, -1.8240082263946533, -6.849755764007568, -2.367011070251465, -3.882582426071167, -2.3491873741149902, -2.3605785369873047, -4.752938270568848, -4.5521955490112305]], 'mask': [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], 'tags': ['U-ORG', 'O', 'O', 'U-ORG', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'B-ORG', 'I-ORG', 'I-ORG', 'I-ORG', 'L-ORG', 'O', 'U-LOC', 'O'], 'words': ['AllenNLP', 'is', 'a', 'PyTorch', '-', 'based', 'natural', 'language', 'processing', 'library', 'developed', 'at', 'the', 'Allen', 'Institute', 'for', 'Artificial', 'Intelligence', 'in', 'Seattle', '.']}


def gs_nlp_process(batch_action_uuid: str, action_uuid: str):
    logger.info(
        f"action '{action_uuid}' fininsh trigger function 'gs_nlp_process' is called . Function will implement later.")


if __name__ == "__main__":
    ls_sentences = ["a very well-made, funny and entertaining picture.",
                    "AllenNLP is a PyTorch-based natural language processing library developed at the Allen Institute for Artificial Intelligence in Seattle."]
    for s in ls_sentences:
        print(s)
        print(AllenNLPPredictor.sentiment_predictor().predict(s))
        print("-"*30)
